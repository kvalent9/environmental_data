# Create model fits
fit_hewa_slope = glm(HEWA_pres ~ slope, data = dat_all, family = binomial)
fit_hewa_ba_tot = glm(HEWA_pres ~ ba.tot, data = dat_all, family = binomial)
fit_hewa_both_additive = glm(HEWA_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_hewa_both_interactive = glm(HEWA_pres ~ slope * ba.tot, data = dat_all, family = binomial)
summary(fit_hewa_both_additive)
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
ba_newdata = data.frame(
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$hewa_predicted =
predict(
fit_hewa_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$hewa_predicted =
predict(
fit_hewa_ba_tot,
newdata = ba_newdata,
type = "response"
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
HEWA_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ slope, data = slope_newdata)
plot(
HEWA_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ ba.tot, data = ba_newdata)
AIC(
fit_hewa_ba_tot,
fit_hewa_slope,
fit_hewa_both_additive,
fit_hewa_both_interactive)
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_hewa_both_additive,
newdata = new_dat_all,
type = "response")
z_hewa_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_hewa_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
z_hewa_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_hewa_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
new_dat_all$pred_int = predict(
fit_hewa_both_interactive,
newdata = new_dat_all,
type = "response")
z_hewa_int = matrix(
new_dat_all$,
z_hewa_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_hewa_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
persp3d(
x = ba.tot,
y = slope,
z = z_hewa_int,
col = "red",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_hewa_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_hewa_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
points(power ~ sample_size, data = sim_sample_size, pch = 20, col = "BLUE")
legend("bottomright", legend = c("smoothed", "original"), lty = c(1, NA), pch = c(NA, 20), col = c("black", "blue"))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size",
main = LOWESS Model 30%)
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size",
main = "LOWESS Model 30%")
##Adding points
points(power ~ sample_size, data = sim_sample_size, pch = 20, col = "BLUE")
?legend()
legend("bottomright", legend = c("smoothed", "original"), lty = c(1, NA), pch = c(NA, 20), col = c("black", "blue"))
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
curve(
exp_fun(x, 8, 0.002), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 8, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 8, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 6, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dat_dispersal <- data.frame(read.csv(here("data", "dispersal.csv")))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
plot(x= dat_dispersal$disp.rate.ftb, y=dat_dispersal$dist.class)
dat_dispersal <- data.frame(read.csv(here("data", "dispersal.csv")))
require(here)
dat_dispersal <- data.frame(read.csv(here("data", "dispersal.csv")))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
curve(
exp_fun(x, 6, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 6, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 1.2, 0.4), add = TRUE, from = 0, to = 35,
ann = FALSE, axes = TRUE, ylab = "f(x)", col= "red", lty=2, lwd=1); box()
curve(
exp_fun(x, 1.2, 0.2), add = TRUE, from = 0, to = 35,
ann = FALSE, axes = TRUE, ylab = "f(x)", col= 2); box()
curve(
exp_fun(x, 1.9, 0.3), add = TRUE, from = 0, to = 35,
ann = FALSE, axes = TRUE, ylab = "f(x)", lty=2, lwd= 1); box()
curve(
exp_fun(x, 1.9, 0.3), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)", lty=2, lwd= 1); box()
curve(
exp_fun(x, 6, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dat_dispersal <- data.frame(read.csv(here("data", "dispersal.csv")))
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
curve(
exp_fun(x, 6, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 6, 0.01), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
fit_exp_nls = nls(
disp.rate.ftb ~ exp_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_exp_nls)
dist_newdata_2 = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_exp_nls, newdata = dist_newdata_2))
lines(predict(fit_exp_nls, newdata = dist_newdata_2, col = "red"))
lines(predict(fit_exp_nls, newdata = dist_newdata_2), col= "red")
lines(predict(fit_exp_nls, newdata = dist_newdata_2), col= "red", lty = "dotted")
curve(
exp_fun(x, 6, 0.01), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)", lty = "dotted"); box()
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
curve(
exp_fun(x, 6, 0.01), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)", lty = "dotted"); box()
lines(predict(fit_exp_nls, newdata = dist_newdata_2), col= "red", lty = "dotted")
lines(predict(fit_exp_nls, newdata = dist_newdata_2), col= "red")
legend("topright", legend = c("nls fit", "exponential fit"), lty = c("solid", "dotted"), col = c("red", "black"))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - NLS exponential fit")
curve(
exp_fun(x, 6, 0.01), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)", lty = "dotted"); box()
lines(predict(fit_exp_nls, newdata = dist_newdata_2), col= "red")
legend("topright", legend = c("nls fit", "exponential fit"), lty = c("solid", "dotted"), col = c("red", "black"))
dat_all$GCKI_pres = dat_all$GCKI > 0
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$GCKI_pres = dat_all$GCKI > 0
dat_all$GCKI_pres
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
AIC(
fit_gcki_ba_tot,
fit_gcki_slope,
fit_gcki_both_additive,
fit_gcki_both_interactive)
coef_table = coefficients(fit_gcki_both_interactive)
str(coef_table)
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_hewa_both_additive,
newdata = new_dat_all,
type = "response")
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
new_dat_all$pred_add = predict(
fit_hewa_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
slope_newdata$gcki_predicted =
predict(
fit_gcki_slope,
newdata = slope_newdata,
type = "response"
)
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
ba_newdata = data.frame(
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$gcki_predicted =
predict(
fit_gcki_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$gcki_predicted =
predict(
fit_hewa_ba_tot,
newdata = ba_newdata,
type = "response"
)
ba_newdata$gcki_predicted =
predict(
fit_gcki_ba_tot,
newdata = ba_newdata,
type = "response"
)
par(mfrow = c(2, 1))
plot(
HEWA_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
lines(gcki_predicted ~ slope, data = slope_newdata)
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
par(mfrow = c(2, 1))
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_hewa_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
