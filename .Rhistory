}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power = sample_size_powers)
sample_sizes = seq(2, 20)
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_size_powers = numeric(length(sample_sizes))
max_x = max(birdhab$ls)
fit_1 = lm(BRCR ~ ls, data=birdhab)
fit_1_coefs = coefficients(fit_1)
fit_1_coefs
str(fit_1_coefs)
fit_1_summary = summary(fit_1)
str(fit_1_summary)
sd_obs = fit_1_summary$sigma
slope_obs = 0.005840474
int_obs = 0.099103949
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power = sample_size_powers)
plot(
power ~ effect_size, data = sim_effect_size,
type = 'l', xlab = 'Effect size', ylab = 'Power')
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l', xlab = 'Sample size', ylab = 'Power')
abline(v = nrow(birdhab), lty = 2, col = 'red')
fit_lowess_50 = loess(power ~ sample_size, data = sim_sample_size, span = 0.5)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_50, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
points(power ~ sample_size, data = sim_sample_size, pch = 20, color = "BLUE")
points(power ~ sample_size, data = sim_sample_size, pch = 20, col = "BLUE")
?legend()
legend("bottomright", legend = c("smoothed", "original"), lty = c(1, NA), pch = c(NA, 20), col = c("black", "blue"))
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(
ricker_fun(x, 1, 1),
from = 0, to = 5, add = FALSE,
main = "Ricker function: a = 1, b = 1",
ylab = "f(x)", xlab = "x")
dat_dispersal <- data.frame(read.csv(here("data", "dispersal.csv")))
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(
ricker_fun(x, 1, 1),
from = 0, to = 5, add = FALSE,
main = "Ricker function: a = 1, b = 1",
ylab = "f(x)", xlab = "x")
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
curve(
exp_fun(x, 2.2, 1/15), add = FALSE, from = 0, to = 50,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
plot(x= dispersal_dat$disp.rate.ftb, y=dispersal_dat$dist.class)
plot(x= dat_dispersal$disp.rate.ftb, y=dispersal_dat$dist.class)
plot(x= dat_dispersal$disp.rate.ftb, y=dat_dispersal$dist.class)
curve(
ricker_fun(x, 40, 0.3),
from = 0, to = 5, add = TRUE,
main = "Ricker function",
ylab = "f(x)", xlab = "x", lty=2, lwd= 1, col= "red")
curve(
ricker_fun(x, 75, 0.3),
from = 0, to = 5, add = TRUE,
main = "Ricker function",
ylab = "f(x)", xlab = "x", col="red")
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
curve(
exp_fun(x, 1.2, 0.4), add = TRUE, from = 0, to = 35,
ann = FALSE, axes = TRUE, ylab = "f(x)", col= "red", lty=2, lwd=1); box()
plot(x= dat_dispersal$disp.rate.ftb, y=dat_dispersal$dist.class)
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(
ricker_fun(x, 75, 0.3),
from = 0, to = 5, add = TRUE,
main = "Ricker function",
ylab = "f(x)", xlab = "x", col="red")
curve(
ricker_fun(x, 0.015, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
plot(x= dat_dispersal$disp.rate.ftb, y=dat_dispersal$dist.class)
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(
ricker_fun(x, 0.015, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
curve(line_point_slope(x, 800, 0.20068, -0.0003), add = TRUE)
curve(
ricker_fun(x, 0.015, 0.8),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.015, 0.2),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.015, 0.1),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.015, 0.001),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.015, 0.05),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.025, 0.05),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.3),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.8, 0.3),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.6),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.07),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.07),
from = 400, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
curve(
ricker_fun(x, 0.1, 0.07),
from = 400, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.01),
from = 400, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.01),
from = 100, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.1, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dispersal_dat <- read.csv(here("data", "dispersal.csv"))
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
curve(
ricker_fun(x, 0.015, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
curve(
ricker_fun(x, 0.1, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
curve(
ricker_fun(x, 0.015, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x")
fit_ricker_nls = nls(
disp.rate.ftb ~ ricker_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_ricker_nls)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend("topright", legend = c("nls fit"), lty = 1, col = c(1))
curve(
ricker_fun(x, 0.015, 0.01),
from = 0, to = 1500, add = TRUE,
ylab = "f(x)", xlab = "x",
lty = "dotted", col = "red")
legend("topright", legend = c("nls fit", "ricker fit"), lty = c("solid", "dotted"), col = c("black", "red"))
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$HEWA_pres = dat_all$HEWA > 0
dat_all$HEWA_pres
plot(x= dat_all$elev, y= dat_all$HEWA_pres)
plot(x= dat_all$elev, y= dat_all$HEWA_pres, ylim = c("absent", "present"))
plot(x= dat_all$elev, y= dat_all$HEWA_pres)
# Hermit warbler presence/absence
dat_all$HEWA_pres = dat_all$HEWA > 0
# Create model fits
fit_hewa_slope = glm(HEWA_pres ~ slope, data = dat_all, family = binomial)
fit_hewa_ba_tot = glm(HEWA_pres ~ ba.tot, data = dat_all, family = binomial)
fit_hewa_both_additive = glm(HEWA_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_hewa_both_interactive = glm(HEWA_pres ~ slope * ba.tot, data = dat_all, family = binomial)
summary(fit_hewa_both_additive)
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
ba_newdata = data.frame(
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$hewa_predicted =
predict(
fit_hewa_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$hewa_predicted =
predict(
fit_hewa_ba_tot,
newdata = ba_newdata,
type = "response"
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
HEWA_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ slope, data = slope_newdata)
plot(
HEWA_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ ba.tot, data = ba_newdata)
AIC(
fit_hewa_ba_tot,
fit_hewa_slope,
fit_hewa_both_additive,
fit_hewa_both_interactive)
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_hewa_both_additive,
newdata = new_dat_all,
type = "response")
z_hewa_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_hewa_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
z_hewa_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_hewa_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
new_dat_all$pred_int = predict(
fit_hewa_both_interactive,
newdata = new_dat_all,
type = "response")
z_hewa_int = matrix(
new_dat_all$,
z_hewa_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_hewa_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
persp3d(
x = ba.tot,
y = slope,
z = z_hewa_int,
col = "red",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_hewa_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_hewa_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
points(power ~ sample_size, data = sim_sample_size, pch = 20, col = "BLUE")
legend("bottomright", legend = c("smoothed", "original"), lty = c(1, NA), pch = c(NA, 20), col = c("black", "blue"))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size",
main = LOWESS Model 30%)
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size",
main = "LOWESS Model 30%")
##Adding points
points(power ~ sample_size, data = sim_sample_size, pch = 20, col = "BLUE")
?legend()
legend("bottomright", legend = c("smoothed", "original"), lty = c(1, NA), pch = c(NA, 20), col = c("black", "blue"))
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
curve(
exp_fun(x, 8, 0.002), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 8, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
curve(
exp_fun(x, 8, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
curve(
exp_fun(x, 6, 0.001), add = TRUE, from = 0, to = 1500,
ann = FALSE, axes = TRUE, ylab = "f(x)"); box()
)
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
exp_fun =function(x, a, b)
{
return(a * exp(-b * x))
}
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
plot(
dispersal_dat$dist.class,
dispersal_dat$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
dat_dispersal <- data.frame(read.csv(here("data", "dispersal.csv")))
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Marbled Salamander - first time breeders")
plot(x= dat_dispersal$disp.rate.ftb, y=dat_dispersal$dist.class)
